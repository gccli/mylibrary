
* Introduction
  Kerberos is a computer network authentication protocol which works on the basis of 'tickets' to allow nodes communicating over a non-secure network to prove their identity to one another in a secure manner.
  "A secure, single sign on, trusted third party mutual authentication service".

** SASL and Kerberos
The Simple Authentication and Security Layer, or SASL, framework was introduced as a way to further insulate applications from underlying authentication and other security services
SASL provides an application framework (more than just an API) that simplifies building secure applications that only need a simple, bidirectional stream‐oriented communications facility between peers.


* Definition

** Realm
   - Indicates an authentication administrative domain
   - Intention: to establish the boundaries within which an authentication server has the authority to authenticate a user, host or service. 
   - Basically, a user/service belongs to a realm if and only if he/it shares a secret (password/key) with the authentication server of that realm. 
   - Case sensitive; normally realms always appear in upper case letters. 
     
** Principal
   - A principal is the name used to refer to the entries in the authentication server database.
   - A principal is associated with each user, host or service of a given realm.
     - component1/component2/.../componentN@REALM 
     - Name[/Instance]@REALM

   Principals in Kerberos can be either users or software applications (a.k.a., services, servers, computers, applications, nodes, PCs).
   User principals, or often just “principals,” are normally associated with persons, but might be associated with roles fulfilled by persons, or even agents acting on behalf of real persons in some cases.
   Host or service principals can represent a single physical computer, or a service running on one or more computers.
   A single physical computer might host multiple services, each given its own Kerberos principal name. It is also possible for a single named service principal to be hosted across multiple physical computers.
   A principal name includes a text string such as joe, system‐administrator, or mail‐transport‐daemon and the realm name in which the principal is defined.

** Ticket
   - A ticket is something a client presents to an application server to demonstrate the authenticity of its identity.
   - Tickets are issued by the authentication server and are encrypted using the secret key of the service they are intended for.
     + The requesting user's principal (generally the username);
     + The principal of the service it is intended for;
     + The IP address of the client machine from which the ticket can be used.
     + The date and time (in timestamp format) when the tickets validity commences;
     + The ticket's maximum lifetime
     + The session key

** Encryption
   - Encryption type: RC4-HMAC, DES (3DES) and newer AES128 and AES256
   - Encryption key: string2key which transforms an unencrypted password into an encryption key suitable for the type of encryption to be used 
   - Salt: This is a string to be concatenated to the unencrypted password before applying the string2key function to obtain the key.
     + K = string2key ( P + "credential@EXAMPLE.COM" ) 
   -  Key Version Number (kvno): 

** Key Distribution Center (KDC)
   it can be logically considered divided into three parts: Database, Authentication Server (AS) and Ticket Granting Server (TGS) 
   - Database
   - Authentication Server (AS):  Ticket Granting Ticket, or more briefly TGT, the principal associated with which is krbtgt/REALM@REALM.
     If the users are actually who they say they are they can use the TGT to obtain other service tickets.
   - Ticket Granting Server (TGS):  distributes service tickets to clients with a valid TGT. which provides the issuing of service tickets as a service
   -

** Session Key
   it is necessary that the user also shares a secret with the service, at least for the time in which a client has a work session open on a server: this key, generated by the KDC when a ticket is issued, is called the Session Key.

** Authenticator
   Problem: In an open and insecure network, ticket can be capture
   the client and server, at least during a session have the session key in common that only they know.
   along with the request containing the ticket, the client adds another packet (the authenticator) where the user principal and time stamp (its at that time) are included and encrypts it with the session key; the server which must offer the service, upon receiving this request, unpacks the first ticket, extracts the session key and, if the user is actually who he/she says, the server is able to unencrypt the authenticator extracting the timestamp. If the latter differs from the server time by less than 2 minutes (but the tolerance can be configured) then the authentication is successful. This underlines the criticality of synchronization between machines belonging to the same realm.

** Replay Cache
   Problem: Impostor to simultaneously steal both the ticket and the authenticator and use them during the 2 minutes the authenticator is valid
   In application servers (but also in TGS), there exists the capacity to remember authenticators which have arrived within the last 2 minutes, and to reject them if they are replicas.
   As long as the impostor is not smart enough to copy the ticket and authenticator and make them arrive at the application server before the legitimate request arrives. 

** Credential Cache
   It is necessary to memorise the tickets and related session key. The place where this data is stored is called the "Credential Cache".

* Kerberos Operation
  AS_REQ is the initial user authentication request (i.e. made with kinit) This message is directed to the KDC component known as Authentication Server (AS);
  AS_REP is the reply of the Authentication Server to the previous request. Basically it contains the TGT (encrypted using the TGS secret key) and the session key (encrypted using the secret key of the requesting user);
  TGS_REQ is the request from the client to the Ticket Granting Server (TGS) for a service ticket. This packet includes the TGT obtained from the previous message and an authenticator generated by the client and encrypted with the session key;
  TGS_REP is the reply of the Ticket Granting Server to the previous request. Located inside is the requested service ticket (encrypted with the secret key of the service) and a service session key generated by TGS and encrypted using the previous session key generated by the AS;
  AP_REQ is the request that the client sends to an application server to access a service. The components are the service ticket obtained from TGS with the previous reply and an authenticator again generated by the client, but this time encrypted using the service session key (generated by TGS);
  AP_REP is the reply that the application server gives to the client to prove it really is the server the client is expecting. This packet is not always requested. The client requests the server for it only when mutual authentication is necessary

* Tickets in further detail
   kinit - obtain and cache Kerberos ticket-granting ticket

* Kerberos and Public Key Cryptography
PKINIT—Public Key Cryptography for Initial Authentication in Kerberos

* Configure Kerberos (RHEL) for Integrate with LDAP
  Before configure kerberos you should install necessary package:  krb5-libs, krb5-server, and krb5-workstation. 

  1. Edit configuration files: /etc/krb5.conf and /var/kerberos/krb5kdc/kdc.conf
  2. Database administration
     kdb5_util program to manipulate the Kerberos database as a whole, and the kadmin program to make changes to the entries in the database
  2.1 kdb5_util provides a means to create, delete, load, or dump a Kerberos database.
     /usr/sbin/kdb5_util create -s  # the stash file is also created
     kdb5_util dump -verbose /tmp/dump # dump principal

  2.2 kadmin provides for the maintenance of Kerberos principals, password policies, and service key tables (keytabs).

  # getprinc, listprincs
     kadmin.local -q "listprincs"  # To generate a listing of principals
     kadmin.local -q "ktadd -k /var/kerberos/krb5kdc/kadm5.keytab kadmin/admin"

  # add host principal
     kadmin.local:  addprinc -randkey host/rhel.inetlinux.net
     kadmin.local -q "ktadd -k /etc/krb5.keytab host/rhel.inetlinux.net"

  4. Edit ACL file
      /var/kerberos/krb5kdc/kadm5.acl 

  5. start kdc and kadmin
     service krb5kdc start
     service kadmin start

  6. copy schema file to ldap server
     # on ldap0
     scp rhel:/usr/share/doc/krb5-server-ldap-1.10.3/kerberos.schema ./
     scp rhel:/usr/share/doc/krb5-server-ldap-1.10.3/kerberos.schema ldap1:/usr/local/etc/openldap/schema/
     # it slapd.conf
     include /etc/openldap/schema/kerberos.schema
     
  7. Based the following configuration, store password to file. Configure LDAP back end
     ldap_kdc_dn = "cn=admin,dc=inetlinux,dc=net"
     ldap_kadmind_dn = "cn=admin,dc=inetlinux,dc=net"
     ldap_service_password_file = /var/kerberos/krb5kdc/service.keyfile
     $ kdb5_ldap_util -D cn=admin,dc=inetlinux,dc=net create -subtrees ou=people,dc=inetlinux,dc=net:dc=inetlinux,dc=net -r INETLINUX.NET -s
     $ kdb5_ldap_util -D cn=admin,dc=inetlinux,dc=net stashsrvpw -f /var/kerberos/krb5kdc/service.keyfile cn=admin,dc=inetlinux,dc=net
     Lists the name of realms
     $ kdb5_ldap_util -D cn=admin,dc=inetlinux,dc=net  view -r INETLINUX.NET

======== kdc.conf ========
[kdcdefaults]
 kdc_ports = 88
 kdc_tcp_ports = 88

[realms]
 INETLINUX.NET = {
  acl_file = /var/kerberos/krb5kdc/kadm5.acl
  dict_file = /usr/share/dict/words
  admin_keytab = /var/kerberos/krb5kdc/kadm5.keytab
  supported_enctypes = aes256-cts:normal aes128-cts:normal des3-hmac-sha1:normal arcfour-hmac:normal des-hmac-sha1:normal des-cbc-md5:normal des-cbc-crc:normal
  database_module = openldap_ldapconf
 }

[dbdefaults]
 ldap_kerberos_container_dn = cn=krbcontainer,dc=inetlinux,dc=net

[dbmodules]
 openldap_ldapconf = {
  db_library = kldap
  disable_last_success = true
  ldap_kdc_dn = "cn=admin,dc=inetlinux,dc=net"
# this object needs to have read rights on
# the realm container and principal subtrees                                                                                                                                                       
  ldap_kadmind_dn = "cn=admin,dc=inetlinux,dc=net"
# this object needs to have read and write rights on
# the realm container and principal subtrees
  ldap_service_password_file = /var/kerberos/krb5kdc/service.keyfile
  ldap_servers = ldaps://ldap0.inetlinux.net
  ldap_conns_per_server = 5
 }


