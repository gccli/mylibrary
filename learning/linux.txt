* handy command
** emacs
  1. M-< moves to the beginning of the whole text
  2. M-> moves to the end of the whole text
  3. C-@ Mark set C-w

** sed
   sed 's/[ \t]*$//'   # remove white space after line

** find
 -newer file
  File was modified more recently than file.
 -regex pattern
  File name matches regular expression pattern.
  - regex ".*\.h\|.*\.cpp\|.*\.c"
 -size n[cwbkMG]
   'b'    for 512-byte blocks (this is the default if no suffix is used)
   'c'    for bytes
   'w'    for two-byte words
   'k'    for Kilobytes (units of 1024 bytes)
   'M'    for Megabytes (units of 1048576 bytes)
   'G'    for Gigabytes (units of 1073741824 bytes)


** awk
   Split a file by specified string
   awk '/BEGIN CERTIFICATE/{n++}{print > f n}' f=cert. trusted_root_ca.pem

** rsync
rsync -av --exclude *.o --exclude .svn --exclude *~ --exclude *.a centos0:~/mylibrary ~/

** binary file process command
xxd
od -Ax -tx1 infile.bin
hexdump -C infile.bin
xxd -r -p infile.txt outfile.bin
echo -n c984aed014aec7623a54f0591da07a85fd4b762d | xxd -r -p > outfile.bin

** remount a read-only filesystem
   mount -o remount,rw FS

** syslog control
*** forbid log rotate
    sed -i 's$\brotate.*\b$rotate 0$' /etc/logrotate.d/*
    sed -i 's/daily/weekly/' /etc/logrotate.d/rsyslog
    sed -i '/compress/d' /etc/logrotate.d/rsyslog

* system
** time
   # update time with ntp
   ntpdate ntp.ubuntu.com
   until ping -nq -c3 8.8.8.8; do
     echo "Waiting for network..."
   done
   ntpdate -s time.nist.gov

* programming
** gcc/g++
** gdb
   x/512b memory
** valgrind
   # memory check
   valgrind --tool=memcheck --log-file=vcheck.out --leak-check=full --undef-value-errors=no --free-fill=0xBB --malloc-fill=0xAA
   # multi-thread check
   valgrind  --tool=helgrind --track-lockorders=no --log-file=vcheck.out

* openssl

** certificates
*** Certificate Format Notes
   # keys
   key.pem # RSA or DSA key in PEM format
   key.der # RSA or DSA key in DER format

   # certificates:
   # may contain text + private key + cert
   # in single file or keys may be in separate files
   # typically if key unencrypted it must be in a separate file
   cert.pem # PEM format
   cert.der # DER format
   cert.p12 # PKCS12 format
   PKCS12 (RSA Labs Standard) format are typically used by browsers:

   # conversion PKCS12 > PEM
   openssl pkcs12 -clcerts -nokeys -in cert.p12 -out usercert.pem
   # extracts certificate only

   openssl pkcs12 -nocerts -in cert.p12 -out userkey.pem
   # extracts key only

   # conversion PEM > PKCS12
   openssl pkcs12 -export -out cert.p12 -inkey ./userkey.pem -in ./usercert.pem

* unpack ramdisk
  $ mkdir -p /tmp/initramfs
  $ cd /tmp/initramfs
  $ cp /boot/initrd.img-2.6.14-1-686 initramfs.gz
  $ gzip -d initramfs.gz
  $ cpio -i < initramfs

* openssh
ref:http://www.ibm.com/developerworks/aix/library/au-sshsecurity/
ref:http://www.openssh.org/

** Using ssh-agent with ssh
   1. Generate the keys.
      $ ssh-keygen -t rsa -f RSA_key -C "lijing@inetlinux.net"
   2. Copy the key to other hosts you will connect from
      $ scp RSA_key ldap1:~/.ssh
   3. Add RSA_key.pub to ~/.ssh/authorized_keys
   4. On remote machine, connect to local machine

   5. On remote machine, start ssh-agent
      $ eval `ssh-agent`
   6. On remote machine, run ssh-add RSA-key
   7. ssh local  # no password needed

** some usage
   ssh-add -l # list keys
   ssh-add -L # list keys, detail
   ssh-add -D # delete all keys

* Json
** veriry
   json_verify < mapping.json

* svn
$ add executable permission
svn propset svn:executable on *.sh
svn propdel svn:executable on *.c
